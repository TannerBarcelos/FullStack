{"version":3,"sources":["components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","api/youtube.js","config.js","components/App.js","index.js"],"names":["SearchBar","props","state","term","onInputChange","bind","onFormSubmit","e","this","setState","target","value","preventDefault","className","onSubmit","htmlFor","type","id","onChange","Component","VideoItem","video","onVideoSelect","title","snippet","thumbnail","thumbnails","medium","url","onClick","src","alt","VideoList","videos","videoList","map","key","videoId","VideoDetail","videoSource","description","axios","create","baseURL","require","config","process","App","a","youtube","get","params","q","part","maxResults","envVars","result","data","items","selectedVideo","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2832341d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '',\n    };\n\n    //bind events to this\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  //callback for the onchange event handler: everytime a character is pressed, onchange calls this method to reset the state capture of the current search term\n  onInputChange(e) {\n    this.setState({term: e.target.value});\n  }\n\n  //handles the submission of the search term\n  //prevent the default enter to submit\n  onFormSubmit(e) {\n    e.preventDefault();\n\n    //call the onsearchsubmit method from app component which takes the search term state, and uses the axios library to call it and search youtube\n    this.props.onFormSubmit(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"search-bar ui segment\">\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\n          <div className=\"field\">\n            <label htmlFor=\"search-video\">Video Search</label>\n            {/*make a controlled input: that is, hook it to state to store the data (every char entered) for the search component and not the dom\n            and assign the value of the input node the state term for efficiency*/}\n            <input\n              type=\"text\"\n              id=\"serch-video\"\n              value={this.state.term}\n              onChange={this.onInputChange}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\n//static file css:\nimport '../static/styles/VideoItem.css';\n\n//desturcture the video object we receive and the select callback\nconst VideoItem = ({video, onVideoSelect}) => {\n  //grabbing the video titlw and thumbnail through the destructured prop variable\n  const title = video.snippet.title; //video title\n  const thumbnail = video.snippet.thumbnails.medium.url; //video thumbnail url (for the src of our image to be put into the card)\n\n  return (\n    <div\n      className=\"video-item item\"\n      onClick={() => {\n        onVideoSelect(video);\n        //call the callback from app (passed all the way down\n        //to get the video the user pressed (which is a div which represents this component!))\n      }}\n    >\n      <img src={thumbnail} className=\"ui image\" alt={title} />\n      <div className=\"content\">\n        <div className=\"header\">{title}</div>\n      </div>\n    </div>\n  );\n};\nexport default VideoItem;\n\n/**\n * To understand this onclick callpback which is nested through the components\n * passed down here, see the video 126 in the react course\n */\n","import React from 'react';\n\n//import the video item to render in this list\nimport VideoItem from './VideoItem';\n\n//destructure the props: this is a good practice for props (and destructuring in general is good for both obj. and array)\n//onVideoSelect is a callback to be invoked in the video item component: simply destructure it and pass it down yet againa as a prop\nconst VideoList = ({videos, onVideoSelect}) => {\n  //create a list of video components passing a video objext as prop (the object contains vid title, etc)\n  const videoList = videos.map (video => {\n    return (\n      //must have key prop for mapped out list elements\n      (\n        <VideoItem\n          key={video.id.videoId}\n          video={video}\n          onVideoSelect={onVideoSelect}\n        />\n      )\n    );\n  });\n\n  return (\n    //class here is a semantic ui class for styling a list cleanly\n    (\n      <div className=\"ui relaxed divided list scrollOnlyDefault\">\n        {videoList}\n      </div>\n    )\n  );\n};\n\nexport default VideoList;\n","import React from 'react';\n\n//destructure the video prop passed here [which contains an object of the selected video we implemented logic for]\nconst VideoDetail = ({video}) => {\n  //we have to wait for the user to press a video, so, if we do not check for a null video\n  //which is whats passed as the value UNTIL a press, we will get an error SO\n  //we can handle that with a simple check for null video\n  if (!video) {\n    return (\n      <div>\n        Loading...\n      </div>\n    );\n  }\n\n  //get the full video url for the ifram to request: use the default youtube required embed route, and then\n  //attach the videos id that a user clicked, here\n  const videoSource = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n  return (\n    <div>\n      {/*semantic ui embed player css and using an iframe (for embedded media)*/}\n      <div className=\"ui embed\">\n        {/*iframe takes in a url to request from: in our case https://www.youtube.com/embed/ and then add on the distinct id of this image*/}\n        <iframe title=\"video player\" src={videoSource} />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoDetail;\n","import axios from 'axios';\n\n//creating a baseline axios instance: in this case, we put the query params in the app components axios call\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3'\n});","require(\"dotenv\").config()\n\nexport default {\n    key : process.env.REACT_APP_API_KEY\n}\n\n","import React, {Component} from 'react';\n\n//component imports\nimport SearchBar from './SearchBar';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\n//styles\nimport '../App.css';\n\n//api: holds our axios instance to send a request [we will use a callback in app, and call it with the term in the seach bar component]\nimport youtube from '../api/youtube';\n\n//import config file that exports our env vars globally (using a config file is a way to keep my architecture structured [could easily just call process.emv.api.... etc])\nimport envVars from '../config';\n\nclass App extends Component {\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      videos: [],\n      selectedVideo: null,\n      /*Explanation of selected video state:\n\n          this piece of state will hold the current video selected to be displayed. The way we handle this is as followed:\n\n            - we will make a method in the app component called onVideoSelect() which will be a callback that is invoked in the video item \n            - we will pass this callback as reference, down as a prop to the video list, in which video list will pass that as a prop to the video item\n            - once at the item, we can invoke that method as we learned in earlier projects to pass the selected video title (or whatever makes most sense \n            into that callback argument, in which that will then invoke the method, and it will fire off here in app\n            - once fired off, we will be able to actually determine which video to display in the detail component\n\n      */\n    };\n\n    //bind our events\n    this.onFormSubmit = this.onFormSubmit.bind (this);\n  }\n\n  //component did mount lifecycle method: loads before anything else! So, we actually\n  //give the form input a default submission to have some videos exist initially\n  componentDidMount () {\n    this.onFormSubmit ('');\n  }\n\n  //callback which is passed to the search bar component, searchbar handles its own state for the characters enetered. Once user\n  //enters their search, we can invoke this callback with an onsubmit event passing the state of text user entered\n  //as the argument. That argument represents term here. The term is added to our axios ajax request\n  //along with all the required params to get the list of videos (of N max results) and we store that async request\n  //ina  variable that is the state for this comp-onent: an array of videos. Those videos are then passed as prop to the list\n  //this is weird to think asbout at first, but this is the architecture of react and how it runs: study this, and understand what is\n  //going on when reading these comments\n  onFormSubmit = async term => {\n    //await the response: we want app to handle the data and use it as a super-component which can pass it all down to children after the search query is called and sent back\n    const result = await youtube.get ('/search', {\n      //query params\n      params: {\n        q: term,\n        part: 'snippet',\n        type: 'video',\n        maxResults: 30, //max is 50 for free tier\n        key: envVars.key,\n      },\n    });\n    //rest the state: assign the videos array the returned result data property which has a video property which is an array!\n    this.setState ({\n      videos: result.data.items,\n      selectedVideo: result.data.items[0], // <- assigns a default displayed video to the first video returned from our request\n    });\n\n    console.log (this.state.videos);\n  };\n\n  //will get the selected video item : passed as a callback prop all the way down to video item component\n  //which has an onclick method on it which elegantly will be able to see that that item was clicked,\n  //thus, we pass that video into the argument and call it! So cool.\n  onVideoSelect = video => {\n    console.log ('Selected in Video Item but called from app!', video);\n\n    //set the state of the video the user selected so app can keep track of the video a user pressed\n    //remember: this method is a callback sent down all the way to the video item which has a title as its a component with\n    //an object of the youtube query in it: we invoke this fucntion with the onclick on the div the video is in, and grasp the title\n    //and send it as an argument\n    this.setState ({\n      selectedVideo: video,\n    });\n  };\n\n  render () {\n    return (\n      <div className=\"ui container\">\n        {/*pass the ontsermsubmut method as prop down to searchbar to be called passing it the search string the user types:\n      remember: we used state to keep track of their input in that component, so whenever we call this callback, it will ensure\n      it got the most recent submission\n      By convention our propname should match the callback we pass it , or whatever else like a var*/}\n        <SearchBar onFormSubmit={this.onFormSubmit} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n              {/*passing the videos list returned from AJAX and a callback to determine selected video to alter state*/}\n              <VideoList\n                //pass all the videos returned form our call down to the lsit component to map out list item components\n                videos={this.state.videos}\n                onVideoSelect={this.onVideoSelect}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render (<App />, document.getElementById ('root'));\n"],"sourceRoot":""}