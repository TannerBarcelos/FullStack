{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
    // Action Creators - You don't need to change these\
    const increment = () => (\{ type: 'increment' \});\
    const decrement = () => (\{ type: 'decrement' \});\
    \
    //we can destructure props to make it clean: both our action creators we destructured in connect, and count\
    //which is mapped out in the props method all exist in props so just pull it all out by the exact alias\
    const Counter = (\{increment,decrement,count\}) => \{\
        return (\
            <div>\
                \{/*invoke the action creator on the onclick that will update our state in reducer and then it will always change */\}\
                <button className="increment" onClick = \{() => increment() \}>\
                    Increment\
                </button>\
                <button className="decrement" onClick = \{() => decrement()\}>Decrement</button>\
                Current Count: <span>\{count\}</span>\
            </div>\
        );\
    \};\
    \
    //mapStateToProps can take our state and put it in our props: we know this goes in to connect()\
    //which means connect has both access to our provider (links to our reducers state) and also action creators\
    //so, we can see both action creators and reducers [the aliases, its automatically called because when we export default the reducers, we alias their calls with their own names]\
    const mapStateToProps = (state) => \{\
        return \{\
            count: state.count        //count state [thats the only prop we care about: the state]\
        \}\
    \}\
    \
    //if we want to get our actions and our state, we must pass mapstatetoprops in connect\
    //so we can map state we have to props, and then we must pass all action creators in \{\} to destructure them into references\
    const WrappedCounter = ReactRedux.connect(mapStateToProps, \{increment,decrement\})(Counter);\
 }